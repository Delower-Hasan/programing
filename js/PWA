//Registering service worker

if('serviceWorker' in navigator){
    window.addEventListener('load',()=>{
        navigator.serviceWorker
        .register("./sw_caches_pages2.js")
        .then(reg=> console.log('Service Worker: Registerd'))
        .catch(err=> console.log(`Service Worker: Error: ${err}`))
    })
}

//DYNAMIC SERVICE WORKER

const cacheName = 'v2';

// Call install Event
self.addEventListener('install',e=>{
    console.log('Service Worker: Installed')
})

// Call Activate Event
self.addEventListener('activate',(e)=>{
    console.log('Service Worker: Activated')
    // Remove unWanted catches
    e.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.map(cache=>{
                    if(cache !== cacheName){
                        console.log('Service Worker: Clearing Old Caches')
                        return caches.delete(cache)
                    }
                })
            )
        })
    )
})

// Call Fetch Event
self.addEventListener('fetch',e=>{
    console.log('Service Worker: Fetching');
    e.respondWith(
        fetch(e.request)
         .then(res=>{
             //Make copy/clone of response
             const resClone = res.clone();
             //Open Cache
             caches
              .open(cacheName)
               .then(cache =>{            
                   // Add response to cache
                   cache.put(e.request, resClone)
               })
               return res

         }).catch(err => caches.match(e.request))
          .then(res=>res)
    )
})


//STATIC SERVICE WORKER

const cacheName = 'v1';

const cachesAssets = [
    '/',
    '/get-message',
    './test.js',
    './sw_cached_pages.js',
    

]

// Call install Event
self.addEventListener('install',e=>{
    console.log('Service Worker: Installed')
    e.waitUntil(
        caches
        .open(cacheName)
        .then(cache =>{
            console.log('Service Worker: Caching Files')
            cache.addAll(cachesAssets)
        })
        .then(()=> self.skipWaiting() )
    )
})

// Call Activate Event
self.addEventListener('activate',(e)=>{
    console.log('Service Worker: Activated')
    // Remove unWanted catches
    e.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.map(cache=>{
                    if(cache !== cacheName){
                        console.log('Service Worker: Clearing Old Caches')
                        return caches.delete(cache)
                    }
                })
            )
        })
    )
})

// Call Fetch Event
self.addEventListener('fetch',e=>{
    console.log('Service Worker: Fetching');
    e.respondWith(
        fetch(e.request).catch(()=>caches.match(e.request)) 
    )
})


